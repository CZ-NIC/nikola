#!/usr/bin/python

import base64
import json
import optparse
import subprocess
import zlib

from nikola.logger import get_logger
from nikola.rpc_wrapper import WrappedServer
from nikola.syslog_parser import parse_syslog


if __name__ == '__main__':

    # Parse the command line options
    optparser = optparse.OptionParser("usage: %prog [options] server_addr")
    optparser.add_option("-l", "--log-file", dest='syslog_file',
                         default='/var/log/iptables.1', type='string',
                         help='specify the syslog file to be parsed')

    optparser.add_option("-m", "--max", dest='max', default=1000, type='int',
                         help='max record count to be sent')

    optparser.add_option("-f", "--date-format", dest='date_format',
                         default='%Y-%m-%dT%H:%M:%S', type='string',
                         help='specify the syslog date format')

    optparser.add_option("-r", "--log-rotate-conf", dest='logrotate_conf',
                         default='/etc/logrotate.d/nikola', type='string',
                         help='specify the log rotate config to be triggered')

    optparser.add_option("-d", "--debug", dest='debug', action='store_true',
                         default=False, help='use debug output')

    (options, args) = optparser.parse_args()

    if len(args) != 1:
        optparser.error("incorrect number of arguments")

    logger = get_logger(options.debug)

    server_addr = args[0]
    syslog_file = options.syslog_file
    max_packet_count = options.max
    syslog_date_format = options.date_format
    logrotate_conf = options.logrotate_conf

    try:

        #logrotete the logs
        output = subprocess.check_output(
            ('/usr/sbin/logrotate', '-s', '/tmp/logrotate.status', logrotate_conf, )
        )
        logger.debug("logrotate output: %s", output)

        s = WrappedServer(server_addr)

        # Parse syslog
        parsed = parse_syslog(syslog_file, syslog_date_format)

        logger.info("Records parsed: %d", len(parsed))
        logger.debug("First record: %s", parsed[0] if parsed else 'No records')
        if max_packet_count < len(parsed):
            msg = "To many data to send in one batch. (%d/%d)" % (len(parsed),
                                                                  max_packet_count)
            logger.error(msg)
            logger.debug(s.init_session())
            logger.debug(s.api_turris_cz.report_error(msg))
        else:
            # comporess the logs
            compressed = base64.b64encode(zlib.compress(json.dumps(parsed), 1))
            logger.debug(s.init_session())
            logger.info(s.api_turris_cz.firewall.store_logs(compressed))

    except Exception, e:
        logger.error("Exception thrown: %s", e)
